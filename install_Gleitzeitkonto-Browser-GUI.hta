<head>
<title>Gleitzeitkonto-Browser</title>
<HTA:APPLICATION 
     APPLICATIONNAME = "Gleitzeitkonto-Browser"
     BORDER = "thin"
     INNERBORDER = "no"
     MAXIMIZEBUTTON = "no"
     SCROLL = "no"
     SINGLEINSTANCE = "yes"
     WINDOWSTATE = "normal"
>
<meta http-equiv="x-ua-compatible" content="ie=10">
</head>
<style type="text/css">
    body {
        background-color: #222222;
        color: #00aab4;
        font-family: Roobert BTC, sans-serif;
    }
    tr {
        margin-bottom: 7px;
    }
    h3 {
        width: 100%;
        text-align: center;
    }


    .btn {
        background-color: #484e5b;
        border-radius: 5px;
        padding-top: 4px !important;
        color: #00aab4;
    }
    .btn:hover {
        background-color: #6a7285;
    }


    .customSelect {
        background-color: #484e5b;
        color: #00aab4;
        border: none;
    }


    .helpBtn {
        margin-left: 5px;
    }
    .installBtn {
        width: 100px;
        position: relative;
        left: 50%;
        margin: -50px 0 0 -50px;
        margin-top: 15px;
    }
    .finishedBtn {
        width: 120px;
        position: relative;
        left: 50%;
        margin: -60px 0 0 -60px;
        margin-top: 5px;
    }
    .openFolderBtn {
        width: 120px;
        position: relative;
        margin-top: 5px;
    }
    .githubLink {
        position: absolute;
        right: 10px;
        bottom: 10px;
    }
    .resetBtn {
        border-width: 0;
        font-family: inherit;
        font-size: inherit;
        font-style: inherit;
        font-weight: inherit;
    }
    .errorField {
        margin-left: 10px;
        color: red;
    }

    @keyframes refreshRotate {
        from {
        transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
    .loadingIcon {
        width: 60px;
        height: 60px;
        position: relative;
        left: 50%;
        margin: -30px 0 0 -30px;
        margin-top: -10px;
        margin-bottom: 5px;

        animation-name: refreshRotate;
        animation-duration: 1s;
        animation-fill-mode: forwards;
        animation-iteration-count: infinite;
        animation-timing-function: cubic-bezier(0.2, 0.6, 0.8, 0.4);
    }
</style>

<body>
<div id="mainFrame">
    <h3><b>Gleitzeitkonto-Browser</b></h3>
    <p id="infoText">
        <i>Installation für Gleitzeitkonto-Browser mit CompanionApp gestartet ...</i><br>
        <i><span style="color: orange">Bitte sicherstellen, dass Node.js installiert ist!</span></i><br>
        <br>
        Bitte wähle für welchen Browser die Erweiterung & CompanionApp installiert werden soll:
    </p>
    <p class="errorField" id="errorField"></p>
    <div id="loadingBox" style="display: none;">
        <svg id="loadingSvg" class="loadingIcon" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="163.839" height="163.839" viewBox="0,0,256,256"><defs><linearGradient x1="59.51" y1="2348.17" x2="4275.66" y2="2348.17" gradientUnits="userSpaceOnUse" id="color-1"><stop offset="0" stop-color="#00aab4"></stop><stop offset="1" stop-color="#222222"></stop></linearGradient></defs><g fill="url(#color-1)" fill-rule="evenodd" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><g transform="scale(0.05905,0.05905)"><path d="M1279,2858c274,348 670,567 1111,567c826,0 1496,-768 1496,-1716c0,-473 -167,-901 -437,-1212c11,-10 21,-19 31,-29c197,167 392,375 555,601c154,300 242,642 242,1005c0,1189 -938,2154 -2096,2154c-1052,0 -1922,-796 -2073,-1833c-47,-326 13,-700 464,-700c584,0 335,690 708,1164z"></path></g></g></svg>
    </div>
    <table id="installTable">
        <tr>
            <td><label><b>Browser:</b></label></td>
            <td>
                <select class="customSelect" required="true" name="browser" style="width: 100%;">
                    <option value="" disabled=true selected=true>-- auswählen --</option>
                    <option value="1">Firefox</option>
                    <option value="2">Chrome (Chromium)</option>
                    <option value="3">Beide Browser</option>
                </select>
            </td>
            <td><input type="button" class="btn resetBtn helpBtn" name="browserHelpBtn" value="?"></td>
        </tr>
    </table>

    <div id="submitWrapper" style="position: relative;"><input type="submit" class="btn resetBtn installBtn" name="submitBtn" value="Installieren"></div>
    <span id="finishedBtnWrapper" style="display: none;"><input class="btn resetBtn finishedBtn" type="button" name="allDoneBtn" value="Fertig stellen"></span>
    <input id="githubBtn" type="button" class="btn resetBtn githubLink" name="githubBtn" value="Github">
</div>

</body>



<script language="VBScript">
    ' This takes care of the installation for Gleitzeitkonto-Browser and does summed up the following

    ' Await user input for which Browser they are installing:
        ' option 1: Firefox, option 2: Chrome (Chromium), option 3: both

    ' Check if Node.js and npm are installed
        ' if not cancel installation

    ' Uninstall any old versions
    ' Download zip files from Github to %LocalAppData%/Programs/Gleitzeitkonto-Browser
    '   see chromiumURL, firefoxURL, companionAppURL

    ' Extract zip contents for CompanionApp
    ' Extract zip contents for Chromium-Extension (if selected)

    ' Create registry entries for CompanionApp

    ' Inform user about successful installation
    

    ' ----- initialize path and url variables -----
    chromiumURL = "https://github.com/NilsPvR/Gleitzeitkonto-Browser/releases/latest/download/NICHT-Herunterladen-win-x64-chromium.zip"
    firefoxURL = "https://github.com/NilsPvR/Gleitzeitkonto-Browser/releases/latest/download/NICHT-Herunterladen-win-x64-firefox.xpi"
    companionAppURL = "https://github.com/NilsPvR/Gleitzeitkonto-Browser/releases/latest/download/NICHT-Herunterladen-win-x64-companionApp.zip"

    ' set shell obj
    set objWShell = CreateObject("WScript.Shell")
    set FSO = CreateObject("Scripting.FileSystemObject")

    localAppData = objWShell.ExpandEnvironmentStrings("%localappdata%")
    installationFolder = localAppData + "\Programs\Gleitzeitkonto-Browser"
    webserverFolder = installationFolder + "\Webserver" ' necessary for backwards compatability
    companionAppFolder = installationFolder + "\CompanionApp"

    boxTitle = "Gleitzeitkonto-Browser"
    dim scriptStopped ' used if a subroutine wants to stop the script but not the whole hta
    scriptStopped = false
    dim strBrowserAnswer, strWebserverAnswer, deleteAttempts ' set global since params are not getting parsed with setTimeout
    deleteAttempts = 0 ' initialize for later use during uninstallation

    sub window_onLoad
        htaWidth = 600
        htaHeight = 360
        call window.resizeTo(htaWidth, htaHeight) ' set the widht and height of the hta
        ' calcualte the window position to center it
        posX = CInt( ( window.screen.width  - htaWidth  ) / 2 )
        posY = CInt( ( window.screen.height - htaHeight ) / 2 )
        if posX < 0 then posX = 0
        if posY < 0 then posY = 0
        call window.moveTo(posX, posY) ' move to center
    end sub

    ' ----- Subs Download, Unzip and Killwebserver -----
    ' -------- Helper subs for download/install --------
    ' --------------------------------------------------

    ' Calling methods have to check for the scriptStopped variable as a measure of error handling.
    sub downloadUnzipAndDelete (downloadURL, fileDir, destination)
        call download(downloadURL, fileDir)
        if (scriptStopped) then exit sub end if
        call unzip(fileDir, destination)
        call FSO.DeleteFile(fileDir, true)
    end sub

    ' Downloads a file from the given downloadURL and writes the content into the given fileDir.
    ' Calling methods have to check for the scriptStopped variable as a measure of error handling.
    ' @param url        string  URL to download from
    ' @parma fileDir    string  path to a file location to save the downloaded file (with file name and extension)
    sub download (url, fileDir)
        requestFailed = false

        set objHTTP = CreateObject( "WinHttp.WinHttpRequest.5.1" )
        call objHTTP.open("GET", url, true) ' async request

        on error resume next ' ignore error when url unavailable
        someResponse = objHTTP.send() ' send request
        call objHTTP.WaitForResponse(120000) ' timeout of 2min 
        
        if (objHTTP.status <> 200) then ' error occurs when status not available -> resume next will continue with next line
            requestFailed = true
        end if
        on error goto 0


        if (requestFailed) then 
            loadingBox.innerHTML = loadingBox.innerHTML + "<span style='color: red;'>Der Download konnte nicht abgeschlossen werden." + _
                " Installation wird abgebrochen.</span><br>"
            call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
            scriptStopped = true ' let calling subroutines know the request failed
            exit sub
        end if
        
        ' request succesful
        set objFSO = CreateObject("Scripting.FileSystemObject")
        dim bStrm: set bStrm = Createobject("Adodb.Stream")


        with bStrm ' save response of request in file
            .type = 1 ' binary
            .open()
            .write(objHTTP.responseBody)
            .savetofile fileDir, 2 'overwrite
        end with

        set objHTTP = nothing
        set objFSO = nothing
        set bStrm = nothing

    end sub

    ' Unzips a given zip file. 
    ' @param source     string  path of the zip file to be unzipped
    ' @param target     string  path for the contents to be placed
    sub unzip(source, target)
        set objShell = CreateObject("Shell.Application")

        set filesInZip = objShell.NameSpace(source).Items ' get all items in zip
        call objShell.NameSpace(target).CopyHere(filesInZip, &H14&) ' extract the items

        set objShell = nothing
    end sub

    ' Sends a webrequest to the kill subdomain of the Gleitzeitkont-Webserver. Will only send
    ' if the given param is 1 or 2, needed for backwards compatability
    ' @param    pstrWebserverAnswer string  will send the request if the string is "1" or "2"
    sub killWebserver ()
        ' ----- Kill old Webserver if existant -----
        on error resume next ' define only in sub to ignore error when Webserver not running

        set objHTTP = CreateObject( "WinHttp.WinHttpRequest.5.1" )
        call objHTTP.open("GET", "http://localhost:35221/kill", False)
        call objHTTP.send()

        set objHTTP = nothing
    end sub


    ' ----- Download and Installation process subs -----
    ' --------------------------------------------------

    ' ----- Install Button clicked -----
    sub submitBtn_onClick ()
        ' get answer for browser
        browserElements = Window.browser.SelectedIndex
        strBrowserAnswer = Window.browser.Options(browserElements).Value

        ' validate Browser answer
        if (strBrowserAnswer = "") then
            errorField.innerHTML = "<i>Bitte eine Option für den Browser auswählen.</i>"
            exit sub
        elseif not (strBrowserAnswer = "1" OR strBrowserAnswer = "2" OR strBrowserAnswer = "3" OR strBrowserAnswer = "4") then
            ' unsanitizes user input in innerHTML, could be manipulated with HTML edits but won't lead to any security issues
            errorField.innerHTML = "<i>'" + strBrowserAnswer + "' ist eine ungültige Eingabe für den Browser.</i>"
            exit sub
        end if

        ' everything went fine so remove any possible previous error messages
        errorField.innerHTML = ""


        ' ----- Start Installation -----

        ' -- Add loading Animation --
        infoText.innerHTML = "" ' remove old html
        installTable.innerHTML = ""
        submitWrapper.innerHTML = ""
        loadingBox.style.display = "block" ' make loading svg visable
        loadingBox.innerHTML = loadingBox.innerHTML + "<br>" ' add linebreak after svg
        githubBtn.style.display = "none" ' make github button invisible since it might block log output

        ' create installation folder if not already present
        if not (FSO.FolderExists(installationFolder)) then
            FSO.CreateFolder(installationFolder)
            loadingBox.innerHTML = loadingBox.innerHTML + "Installations Ordner erstellt<br>"
        end if


        if (strBrowserAnswer = "1" OR strBrowserAnswer = "2" OR strBrowserAnswer = "3") then
            loadingBox.innerHTML = loadingBox.innerHTML + "Überprüfe Node.js Installation...<br>"

            ' calls a chain of subs to allow screen updates everytime
            call window.SetTimeout("checkNodeInstallation()", 1, "VBScript") ' timeout to update screen

        else
            loadingBox.innerHTML = loadingBox.innerHTML + "<span style='color: red;'>Unerwarteter Fehler." + _
                " Es wurden keine Komponenten zum installieren ausgewählt. Installation wird abgebrochen.</span><br>"
            call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
            exit sub ' nothing to do
        end if

    end sub


    sub checkNodeInstallation ()
        errorCodeNPM = objWShell.Run("npm -v", 0, true)
        errorCodeNode = objWShell.Run("node -v", 0, true)

        if (errorCodeNPM = "0" AND errorCodeNode = "0") then ' success
            loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Node.js ist installiert.<br>"
        else 
            loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "<span style='color: red;'>Node.js ist nicht installiert." + _
                "Installation wird abgebrochen.</span><br>"
            call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
            exit sub ' nothing to do
        end if

        
        loadingBox.innerHTML = loadingBox.innerHTML + "Alte Browser-Erweiterung Versionen werden gesucht...<br>"
        call window.SetTimeout("uninstallBrowser()", 1, "VBScript") ' timeout to update screen
    end sub


    ' delete the old versions of the browsers which are getting installed now
    sub uninstallBrowser ()
        if not (FSO.FolderExists(installationFolder)) then
            loadingBox.innerHTML = loadingBox.innerHTML + "<span style='color: red;'>Unerwarteter Fehler." + _
                " Der Installationsordner der alten Browser-Erweiterung ist nicht mehr vorhanden. Installation wird abgebrochen.</span><br>"

            call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
            exit sub ' nothing to uninstall
        end if

        if (strBrowserAnswer = "1" OR strBrowserAnswer = "3") then ' Firefox is getting installed -> delete old version
            oldFirefoxPath = installationFolder + "\Gleitzeitkonto-Browser-Firefox.xpi"
            if (FSO.FileExists(oldFirefoxPath)) then
                FSO.DeleteFile(oldFirefoxPath)
                loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Alte Firefox-Version wurde entfernt</span><br>"
            end if
        end if

        if (strBrowserAnswer = "2" OR strBrowserAnswer = "3") then ' Chromium is getting installed -> delete old version
            oldChromiumPath = installationFolder + "\Chromium" ' old folder name
            if (FSO.FolderExists(oldChromiumPath)) then
                FSO.DeleteFolder(oldChromiumPath)
                loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Alte Chromium-Version wurde entfernt<br>"
            end if

            oldChromiumPath = installationFolder + "\Chrome-Edge(Chromium)" ' new folder name
            if (FSO.FolderExists(oldChromiumPath)) then
                FSO.DeleteFolder(oldChromiumPath)
                loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Alte Chromium-Version wurde entfernt<br>"
            end if            
        end if


        loadingBox.innerHTML = loadingBox.innerHTML + "Alte CompanionApp (ehemalig Hintergrund-Prozess) Versionen werden gesucht...<br>"
        call window.SetTimeout("stopWebserver()", 1, "VBScript") ' timeout to update screen
    end sub

    ' necessary for backwards compatability so old webserver version will be uninstalled
    sub stopWebserver ()
        ' end webserver so no issues with overwriting files which are in use
        call killWebserver()

        ' after stopping the webserver uninstall the old version
        call window.SetTimeout("uninstallWebserver()", 1, "VBScript")
    end sub

    ' necessary for backwards compatability so old webserver version will be uninstalled
    sub uninstallWebserver ()
        dim maxDeleteAttempts, deleteAttemptTimout, everythingDeleted
        everythingDeleted = false ' initialize on false
        maxDeleteAttempts = 200
        deleteAttemptTimout = 100 ' ms

        ' double check if the installation folder still exists, if not cancel the whole installation
        if not (FSO.FolderExists(installationFolder)) then 
            loadingBox.innerHTML = loadingBox.innerHTML + "<span style='color: red;'>Unerwarteter Fehler." + _
                " Der Installationsordner ist nicht mehr vorhanden. Installation wird abgebrochen.</span><br>"

            call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
            exit sub ' can't install anything
        end if


        ' In previous versions the webserver was not installed in a seperate dir -> check for loose files
        dim strings(7) ' array with 8 strings
        strings(0) = installationFolder + "\Gleitzeitkonto-Webserver.exe"
        strings(1) = installationFolder + "\icon.ico"
        strings(2) = installationFolder + "\main.js"
        strings(3) = installationFolder + "\package.json"
        strings(4) = installationFolder + "\package-lock.json"
        strings(5) = installationFolder + "\start-Gleitzeitkonto-Webserver.vbs"
        strings(6) = installationFolder + "\url.json"
        strings(7) = installationFolder + "\version.txt"
        
        if (deleteAttempts < maxDeleteAttempts) then ' if the amount of attempts has not been exceeded
            on error resume next ' ignore errors in case files can't be delted

            ' loop over the array to delete files
            for i = LBound(strings) to UBound(strings)
                if (FSO.FileExists(strings(i))) then FSO.DeleteFile(strings(i)) end if
            next

            ' Delete folders
            if (FSO.FolderExists(webserverFolder)) then FSO.DeleteFolder(webserverFolder) end if
            nodeModulesPath = installationFolder + "\node_modules"
            if (FSO.FolderExists(nodeModulesPath)) then FSO.DeleteFolder(nodeModulesPath) end if
            oldWebserverAPIPath = installationFolder + "\gleitzeitkonto-api"
            if (FSO.FolderExists(oldWebserverAPIPath)) then FSO.DeleteFolder(oldWebserverAPIPath) end if

            on error goto 0 ' enable errors again


            ' Check if all files/folders got deleted
            everythingDeleted = true
            for i = LBound(strings) to UBound(strings)
                if (FSO.FileExists(strings(i))) then everythingDeleted = false end if
            next
            if (FSO.FolderExists(webserverFolder)) then everythingDeleted = false end if
            if (FSO.FolderExists(nodeModulesPath)) then everythingDeleted = false end if
            if (FSO.FolderExists(oldWebserverAPIPath)) then everythingDeleted = false end if

            deleteAttempts = deleteAttempts + 1
        end if


        ' Check if deletion got cancelled or was successful
        if (everythingDeleted = true) then ' deletion successful, continue with installation
            loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Alte Hintergrund-Prozess Version wurde entfernt.<br>"

            loadingBox.innerHTML = loadingBox.innerHTML + "Download Hintergrund-Prozess gestartet, bitte warten ...<br>"
            call window.SetTimeout("uninstallCompanionApp()", 1, "VBScript") ' timeout to update screen

        elseif (deleteAttempts < maxDeleteAttempts) then '  more attempts available, try again
            if (deleteAttempts = 1) then
                loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Alte Webserver-Version wird beendet...<br>"
            end if
            call window.SetTimeout("uninstallWebserver()", deleteAttemptTimout, "VBScript") ' call uninstallWebserver again after specified timeout

        else ' failed to uninstall
            loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + _
                "<span style='color: red;'>Alte Hintergrund-Prozess Version konnte nicht entfernt werden. Installation wird abgebrochen.</span><br>"
            call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timout to update screen
        end if

    end sub

    ' removes the CompanionApp folder and deletes registry entries
    sub uninstallCompanionApp ()

        registryDelCmdFirefox = "reg delete ""HKEY_CURRENT_USER\Software\Mozilla\NativeMessagingHosts\gleitzeitkonto_browser_companionapp"" /f"
        registryDelCmdChrome = "reg delete ""HKEY_CURRENT_USER\Software\Google\Chrome\NativeMessagingHosts\gleitzeitkonto_browser_companionapp"" /f"

        errorCodeFirefox = objWShell.Run(registryDelCmdFirefox, 0, true)
        errorCodeChrome = objWShell.Run(registryDelCmdChrome, 0, true)

        if (FSO.FolderExists(companionAppFolder)) then FSO.DeleteFolder(companionAppFolder) end if

        loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Alte CompanionApp Version wurde entfernt.<br>"

        loadingBox.innerHTML = loadingBox.innerHTML + "Download Browser-Erweiterung gestartet...<br>"
        call window.SetTimeout("downloadProcessBrowser()", 1, "VBScript") ' timeout to update screen
    end sub


    sub downloadProcessBrowser ()
        ' ----- Download Browser Extension -----
        if (strBrowserAnswer = "1" OR strBrowserAnswer = "3") then ' Firefox
            fileDir = installationFolder + "\" + Split(firefoxURL, "/")(8)
            call download(firefoxURL, fileDir) ' do not unzip for firefox
            if (scriptStopped) then exit sub end if

            firefoxInstallPath = installationFolder + "\Gleitzeitkonto-Browser-Firefox.xpi"
            call FSO.MoveFile(fileDir, firefoxInstallPath) ' rename download file
        end if
        if (strBrowserAnswer = "2" OR strBrowserAnswer = "3") then ' Chromium
            fileDir = installationFolder + "\" + Split(chromiumURL, "/")(8)
            call downloadUnzipAndDelete(chromiumURL, fileDir, installationFolder)
            if (scriptStopped) then exit sub end if
        end if

        loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Download Browser-Erweiterung beendet<br>"

        loadingBox.innerHTML = loadingBox.innerHTML + "Download CompanionApp gestartet...<br>"
        call window.SetTimeout("downloadProcessCompanionApp()", 1, "VBScript") ' timeout to update screen

    end sub

    ' download und unzip CompanionApp files, create registry entries
    sub downloadProcessCompanionApp ()

        ' ----- Download CompanionApp -----
        filedir = installationFolder + "\" + Split(companionAppURL, "/")(8)
        call downloadUnzipAndDelete(companionAppURL, fileDir, installationFolder)
        if (scriptStopped) then exit sub end if

        loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Download CompanionApp beendet<br>"
        loadingBox.innerHTML = loadingBox.innerHTML + "Erstelle Verbindung zwischen Browser & CompanionApp...<br>"

        call window.SetTimeout("downloadProcessRegistry()", 1, "VBScript") ' timeout to update screen
    end sub

    sub downloadProcessRegistry ()
        ' ----- Create registry entries for CompanionApp so that browsers can find the CompanionApp -----
        if (strBrowserAnswer = "1" OR strBrowserAnswer = "3") then ' Firefox
            registryCommandChrome = "reg add ""HKEY_CURRENT_USER\Software\Mozilla\NativeMessagingHosts\gleitzeitkonto_browser_companionapp"" /ve /t REG_SZ /d """ + _
                companionAppFolder + "\manifest.json"" /f"

        end if
        if (strBrowserAnswer = "2" OR strBrowserAnswer = "3") then ' Chrome
            registryCommandFirefox = "reg add ""HKEY_CURRENT_USER\Software\Google\Chrome\NativeMessagingHosts\gleitzeitkonto_browser_companionapp"" /ve /t REG_SZ /d """ + _
                companionAppFolder + "\manifest-chromium.json"" /f"

        end if

        loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Verbindung erstellt<br>"
        loadingBox.innerHTML = loadingBox.innerHTML + "Installiere Node-Packages für CompanionApp...<br>"
        call window.SetTimeout("downloadProcessPrepareCompanionApp()", 1, "VBScript") ' timeout to update screen

    end sub

    sub downloadProcessPrepareCompanionApp ()
        ' ----- Prepare CompanionApp / install node dependencies -----

        if (FSO.FileExists(companionAppFolder + "\package.json")) then ' check to avoid unecessary errors
            ' try to install npm packages
            errorCode = objWShell.Run("cmd /c cd /d " & companionAppFolder & " && " & "npm install", 0, true) ' TODO this might cause a lot of lag and take forever
            if (errorCode = "0") then ' success
                loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "Node-Packages wurden installiert<br>"
            else
                loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "<span style='color: red;'>Node-Packages konnten nicht installiert werden!</span><br>"
            end if
        else
            loadingBox.innerHTML = loadingBox.innerHTML + ChrW(&H2001) + "<span style='color: red;'>Node-Packages konnten nicht installiert werden!</span><br>"
        end if

        call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
    end sub

    sub installationFinishedSuccessfully ()
        ' ----- Installation finished -----

        loadingBox.innerHTML = loadingBox.innerHTML + "<span style='color: green;'>Installation erfolgreich abgeschlossen</span><br>"


        if (strBrowserAnswer = "1" OR strBrowserAnswer = "2" OR strBrowserAnswer = "3") then 'a browser got selected
            loadingBox.innerHTML = loadingBox.innerHTML + "<span style='color: orange;'>Richte die Browser-Erweiterung in deinem Browser ein, um Gleitzeitkonto-Browser verwenden zu können</span><br>"
            loadingBox.innerHTML = loadingBox.innerHTML + "<input class='btn resetBtn openFolderBtn' type='button' name='openInstallationFolder' value='Ordner öffnen'>"

            objWShell.Run("https://github.com/NilsPvR/Gleitzeitkonto-Browser/wiki/Gleitzeitkonto%E2%80%90Browser-im-Browser-einrichten"), 0 ' tutorial site
        end if

        call window.SetTimeout("installationProcessEnd()", 1, "VBScript") ' timeout to update screen
    end sub

    
    sub installationProcessEnd ()
        finishedBtnWrapper.style.display = "block" ' make the 'finished' button visable
        loadingSvg.style.animationPlayState = "paused"
        call window.SetTimeout("cleanUp()", 1, "VBScript") ' timeout to update screen
    end sub


    ' ----- Remove all variables -----
    sub cleanUp ()
        set objWShell = nothing
        set FSO = nothing
    end sub

    ' --------- Other Button clicks events -------------
    ' --------------------------------------------------

    ' ----- Help Button for Browser clicked -----
    sub browserHelpBtn_onClick ()
        MsgBox "'Gleitzeitkonto-Browser' ist eine Erweiterung für den Browser mit CompanionApp. Bitte wähle für welchen Browser die Installation vorgenommen werden soll.", 0, boxTitle
    end sub

    ' ----- Github Link clicked -----
    sub githubBtn_onClick ()
        objWShell.Run("https://github.com/NilsPvR/Gleitzeitkonto-Browser"), 0 ' open website
    end sub

    ' ----- Installation finished Button clicked
    sub allDoneBtn_onClick ()
        self.close() ' close the hta window
    end sub


    ' ----- Open Installation Folder Button clicked
    sub openInstallationFolder_onClick ()
        CreateObject("Shell.Application").Explore(installationFolder) 'open a explorer window
    end sub

</script>